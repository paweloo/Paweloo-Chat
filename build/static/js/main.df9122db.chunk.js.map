{"version":3,"sources":["sendIco.svg","widgets/ToggleSwitch.js","themes/mainTheme.js","widgets/Menu.js","themes/GlobalTheme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Switch","styled","div","props","dark","css","Dot","ToggleSwitch","onClick","light","body","header","text","StyledMenu","Menu","name","useContext","UserContext","theme","setTheme","className","Style","createGlobalStyle","GlobalStyles","createContext","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","settingsVisibility","setSettingsVisibility","sendMessage","e","a","preventDefault","uid","photoURL","add","createdAt","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behaviour","Provider","value","src","alt","displayName","map","msg","ChatMessage","key","id","message","ref","onSubmit","onChange","target","required","type","sendIco","messageClass","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.df9122db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sendIco.d04d66d2.svg\";","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst Switch = styled.div`\r\n  border-radius: 50px;\r\n  width: 60px;\r\n  height: 26px;\r\n  margin: 4px 10px 10px 20px;\r\n  background-color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background 0.4s ease-out;\r\n\r\n  ${(props) =>\r\n    props.dark &&\r\n    css`\r\n      background-color: black;\r\n    `};\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  background-color: black;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50px;\r\n  margin-left: 4px;\r\n  transition: margin-left 0.4s, background 0.4s ease-out;\r\n\r\n  ${(props) =>\r\n    props.dark &&\r\n    css`\r\n      background-color: white;\r\n      margin-left: 35px;\r\n    `};\r\n`;\r\n\r\nfunction ToggleSwitch({ dark, onClick }) {\r\n  return (\r\n    <Switch dark={dark} onClick={onClick}>\r\n      <Dot dark={dark} onClick={onClick} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default ToggleSwitch;\r\n","export const light = {\r\n  body: \"white\",\r\n  header: \"0px 0px 12px 0px  rgba(161, 161, 161, 0.6)\",\r\n  text: \"#6b6b6\",\r\n};\r\n\r\nexport const dark = {\r\n  body: \"black\",\r\n  header: \"none\",\r\n  text: \"white\",\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport \"./ToggleSwitch.js\";\r\nimport ToggleSwitch from \"./ToggleSwitch.js\";\r\nimport { UserContext } from \"../App.js\";\r\nimport { light, dark } from \"../themes/mainTheme.js\";\r\n\r\nconst StyledMenu = styled.div`\r\n  background-color: #ececec;\r\n  position: absolute;\r\n  margin-top: 60px;\r\n  margin-right: 26px;\r\n  right: 0;\r\n  top: 0;\r\n  border-radius: 20px;\r\n  color: white;\r\n  text-align: left;\r\n  font-weight: 200;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nfunction Menu({ name, onClick }) {\r\n  const [theme, setTheme] = useContext(UserContext);\r\n  return (\r\n    <StyledMenu>\r\n      <p className=\"userName\">{name}</p>\r\n      <p className=\"buttonDescription\">App theme</p>\r\n      <ToggleSwitch\r\n        onClick={() => {\r\n          theme === light ? setTheme(dark) : setTheme(light);\r\n        }}\r\n        dark={theme === light ? false : true}\r\n      />\r\n      <button className=\"signOutButton\" onClick={onClick}>\r\n        <p>Sign out</p>\r\n      </button>\r\n    </StyledMenu>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst Style = createGlobalStyle`\r\n\r\nbody {\r\n  background-color: ${({ theme }) => theme.body};\r\n  transition: background 0.1s ease-out;\r\n}\r\n\r\nheader, form {\r\n    background-color: ${({ theme }) => theme.body};\r\n    box-shadow: ${({ theme }) => theme.header};\r\n    transition: background 0.1s ease-out;\r\n}\r\n`;\r\n\r\nfunction GlobalStyles() {\r\n  return <Style></Style>;\r\n}\r\n\r\nexport default GlobalStyles;\r\n","import React, { useEffect, useRef, useState, createContext } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport \"./App.css\";\nimport \"./widgets/Menu.js\";\nimport GlobalStyles from \"./themes/GlobalTheme.js\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nimport sendIco from \"./sendIco.svg\";\nimport Menu from \"./widgets/Menu.js\";\n\nimport { light } from \"./themes/mainTheme.js\";\n\nexport const UserContext = createContext({});\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDFoov4nBAQiN_McOyiaO2tfqp58H6N1po\",\n  authDomain: \"paweloo-chat.firebaseapp.com\",\n  databaseURL: \"https://paweloo-chat.firebaseio.com\",\n  projectId: \"paweloo-chat\",\n  storageBucket: \"paweloo-chat.appspot.com\",\n  messagingSenderId: \"156728413226\",\n  appId: \"1:156728413226:web:3274e2c1f22024a36f4753\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <h2 className=\"welcomeText\">Welcome to</h2>\n      <h1 className=\"welcomeText welcomePc\">Paweloo Chat</h1>\n      <button onClick={signInWithGoogle} className=\"signInButton\">\n        Sign in with Google\n      </button>\n    </>\n  );\n}\n\nfunction SignOut() {\n  auth.currentUser && auth.signOut();\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\");\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n\n  const [formValue, setFormValue] = useState(\"\");\n  const [settingsVisibility, setSettingsVisibility] = useState(false);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n  };\n\n  const scrollToBottom = () => {\n    dummy.current.scrollIntoView({ behaviour: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const showSettings = () => {\n    setSettingsVisibility(!settingsVisibility);\n  };\n\n  const [theme, setTheme] = useState(light);\n\n  return (\n    <UserContext.Provider value={[theme, setTheme]}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyles />\n        <header>\n          Paweloo Chat\n          <button className=\"settingsProfileButton\" onClick={showSettings}>\n            <img\n              src={auth.currentUser.photoURL}\n              alt=\"Profile\"\n              className=\"settingsProfile\"\n            />\n            <div className=\"isOnline\" />\n          </button>\n          {settingsVisibility && (\n            <Menu name={auth.currentUser.displayName} onClick={SignOut} />\n          )}\n        </header>\n        <main>\n          {messages &&\n            messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n          <div ref={dummy}></div>\n        </main>\n\n        <form onSubmit={sendMessage}>\n          <input\n            value={formValue}\n            onChange={(e) => setFormValue(e.target.value)}\n            required\n          />\n          <button type=\"submit\" className=\"sendButton\">\n            <img src={sendIco} alt=\"Send\" className=\"sendIcon\" />\n          </button>\n        </form>\n      </ThemeProvider>\n    </UserContext.Provider>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img className=\"profilePhoto\" alt=\"Profile\" src={photoURL} />\n      <p>{text}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}